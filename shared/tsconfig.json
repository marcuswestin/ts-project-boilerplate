// These are our typescript configurations for our code
// that is shared across all services (server, web, mobile, etc)
{
  "compilerOptions": {
    "types": ["node"],
    "lib": ["ES2015", "dom"],
    "target": "ES2015",
    "module": "commonjs",
    "declaration": false,
    // We use react-native-web for our web clients, to use react-native JSX transpiling everywhere
    "jsx": "react-native",
    // Require emit to be passed in as a variable, in order to avoid accidentally creating JS files in the source tree
    "noEmit": true,
    // react-native-web causes conflicting type checks with the
    // baked-in typescript library. Skip type-checking libraries.
    "skipLibCheck": true,
    // Read e.g data/content-library.json file
    "resolveJsonModule": true,
    // Disable interoperability between CommonJS and ES Modules via creation of namespace objects for all imports.
    "esModuleInterop": false,
    // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    "allowSyntheticDefaultImports": true,
    // Disallow inconsistently-cased references to the same file.
    "forceConsistentCasingInFileNames": true,
    // Raise error on expressions and declarations with an implied 'any' type.
    "noImplicitAny": true,
    // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    "moduleResolution": "node",
    // Instantiate class properties the way that upcoming JS standards specify. (See https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier)
    // (This is particularly useful for mobx reactive stores - if properties AREN'T initialized, then they become non-reactive
    // since mobx won't detect them in that case during the makeStoreReactive() call in constructor() { ... })
    "useDefineForClassFields": true,
    // Decorators are a really nice ability to be able to use
    "experimentalDecorators": true,
    // "emitDecoratorMetadata": true,
    // Enable strict type-checking options.
    "strict": true,
    "strictNullChecks": true, // Enable strict null checks.
    "strictFunctionTypes": true, // Enable strict checking of function types.
    "strictBindCallApply": true, // Enable strict 'bind', 'call', and 'apply' methods on functions.
    "strictPropertyInitialization": true, // Enable strict checking of property initialization in classes.
    "noImplicitThis": true, // Raise error on 'this' expressions with an implied 'any' type.
    "alwaysStrict": true, // Parse in strict mode and emit "use strict" for each source file.
    "noImplicitReturns": true, // Report error when not all code paths in function return a value.
    "noFallthroughCasesInSwitch": true, // Report errors for fallthrough cases in switch statement.
    // isolatedModules is a stricter compilation mode, which gives warnings for certain possible problems.
    // All our apps currently compile properly with it on, so leave it on until there's a reason to turn it off for some app.
    "isolatedModules": true,
    // No reason to allow javascript files to be compiled, until there is a reason to.
    "allowJs": false,
    "checkJs": false,
    // These two are annoying during development.
    // It's worth conidering specifying these during build though!
    "noUnusedLocals": false /* Report errors on unused locals. */,
    "noUnusedParameters": false /* Report errors on unused parameters. */
  }
}
